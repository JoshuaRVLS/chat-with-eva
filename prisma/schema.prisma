// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @map("_id")
  username String @unique
  email String @unique
  password String
  profileImage UserProfileImage?  
  verificationToken String?
  verificationTokenExpires DateTime?
  verified Boolean @default(false)
  charCreated Character[]
  chats Chat[]
  comments Comment[]
}

model UserProfileImage {
  id String @id @default(cuid()) @map("_id")
  mimetype String
  data Bytes
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Character {
  id String @id @default(cuid()) @map("_id")
  name String 
  persona String 
  bio String
  scenario String
  introMessage String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  chats Chat[]
  photo CharacterImage?
  tag CharacterTag? @relation(fields: [tagId], references: [id])
  tagId String?
  comments Comment[]
}

model Comment {
  id String @id @default(cuid()) @map("_id")
  content String 
  author User @relation(fields: [authorId], references: [id])
  authorId String
  character Character @relation(fields: [characterId], references: [id])
  characterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CharacterTag {
  id String @id @default(cuid()) @map("_id")
  name String
  chars Character[]
}

model CharacterImage {
  id String @id @default(cuid()) @map("_id")
  data Bytes
  name String 
  mimetype String
  char Character? @relation(fields: [charId], references: [id])
  charId String @unique
}

model Chat {
  id String @id @default(cuid()) @map("_id")
  character Character @relation(fields: [characterId], references: [id]) 
  characterId String
  user User @relation(fields: [userId], references: [id])
  userId String
  messages Message[]
}

model Message {
  id String @id @default(cuid()) @map("_id")
  content String 
  fromUser Boolean
  chat Chat @relation(fields: [chatId], references: [id])
  chatId String 
}

